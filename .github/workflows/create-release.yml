name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.0). Leave empty for auto version bump."
        required: false
        default: ""

env:
  ACT: false
  REGISTRY: "ghcr.io"
  IMAGE_NAME: ${{ github.repository || 'eegfaktura-web' }}
  ZIP_NAME: "eegfaktura-web.zip"
  NO_CHANGES: false
  VERSION: "0.0.0"

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.1
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Determine version and update package.json
        id: determine_version
        run: |
          # Get the current version from package.json
          CURRENT_VERSION=$(jq -r .version package.json)
          if [ "${{ github.event.inputs.version }}" != "" ]; then
            NEW_VERSION=${{ github.event.inputs.version }}
            # Check if the provided version is already set
            if [ "$NEW_VERSION" != "$CURRENT_VERSION" ]; then
              # Update package.json with the provided version
              pnpm version $NEW_VERSION --no-git-tag-version
            else
              echo "Provided version $NEW_VERSION is already set in package.json. Skipping version update."
            fi
          else
            # Auto bump the version
            NEW_VERSION=$(pnpm version patch --no-git-tag-version | grep -oE "[0-9]+\.[0-9]+\.[0-9]+")
          fi
          # Replace dots with underscores for the ZIP_NAME
          ZIP_NAME="${{ github.event.repository.name }}-$(echo $NEW_VERSION | sed 's/\./_/g').zip"
          echo "New version: $NEW_VERSION"
          echo "Zip name: $ZIP_NAME"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

      - name: Run build
        run: pnpm run build

      - name: Zip dist folder
        run: zip -r ${{ env.ZIP_NAME }} dist

      - name: Commit version bump
        id: commit_version
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add package.json
          if git diff --cached --quiet; then
            echo "No changes to commit."
            echo "NO_CHANGES=true" >> $GITHUB_ENV
          else
            git commit -m "chore: bump version to ${{ env.VERSION }}"
            git push origin HEAD
            echo "NO_CHANGES=false" >> $GITHUB_ENV
          fi

      - name: Create Git Tag
        if: ${{ env.ACT != 'true' }}
        run: |
          if [ "${{ env.NO_CHANGES }}" == "true" ]; then
            # Tag the last commit if no new commit was made
            LAST_COMMIT_SHA=$(git rev-parse HEAD)
            git tag v${{ env.VERSION }} $LAST_COMMIT_SHA
          else
            # Tag the new commit
            git tag v${{ env.VERSION }}
          fi
          git push origin v${{ env.VERSION }}

      - name: Create GitHub Release and attach dist folder
        if: ${{ env.ACT != 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          files: ${{ env.ZIP_NAME }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Container Registry
        if: ${{ env.ACT != 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: ${{ env.ACT != 'true' }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          # Get context metadata from the workflow and overrides some of them with current Git context, such as ref and sha
          context: git
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=semver,pattern={{version}},value=v${{ env.VERSION }}
          # generate Docker labels based on the following events/attributes
          labels: |
            org.opencontainers.image.title="eegfaktura-web"
            org.opencontainers.image.description="EEG Faktura web frontend"
            org.opencontainers.image.authors="eegfaktura@vfeeg.org"
            org.opencontainers.image.vendor="Verein zur FÃ¶rderung von Erneuerbaren Energiegemeinschaften"
            org.opencontainers.image.source=${{ github.event.repository.html_url || '' }}
            org.opencontainers.image.url=${{ github.event.repository.html_url || '' }}
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp || '' }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id || '' }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ env.ACT != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      - name: Generate artifact attestation
        if: ${{ env.ACT != 'true' }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
