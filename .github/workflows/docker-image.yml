name: Docker Image CI

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  ACT: false
  REGISTRY: "ghcr.io"
  IMAGE_NAME: ${{ github.repository || 'eegfaktura-web' }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract metadata (tags, labels) for Docker
        if: ${{ env.ACT != 'true' }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            ${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.1
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run build
        run: pnpm run build

      - name: Set version string
        run: echo "IMAGE_VERSION=latest-$(date +'%Y%m%dT%H%M%S')" >> $GITHUB_ENV

      - name: Login to Container Registry
        if: ${{ env.ACT != 'true' }}
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ env.ACT != 'true' }}
          tags: ${{ steps.meta.outputs.tags || 'latest' }}
          labels: ${{ steps.meta.outputs.labels || '' }}

      - name: Generate artifact attestation
        if: ${{ env.ACT != 'true' }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
